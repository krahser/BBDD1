* Normalizacion
#+NAME: Conceptos claves 
** Conceptos claves
*** Propiedades indeseables
- Repetición de información
- Mala representación de la información
- Perdida de información

*** Definiciones
**** Dependencias funcionales
, Las dependencias funcionales sirven para dar semántica a las tablas
y para definir restricciones sobre las mismas. Una dependencia
funcional significa que para un X dado siempre se recupera el mismo
valor de Y

**** Superclave
, Una superclave es un conjunto K de atributos, los cuales conjuntamente, identifican únivocamente a una entidad
en el conjunto de entidades. Si k es superclave cualquier conjunto que contenga K es superclave.

**** Clave candidata
, Una clave candidata es una superclave en la cual ningún subconjunto propio es superclave.
Puede existir más de una clave candidata.

**** Clave primaria
, Es la clave candidata que resulta del proceso de normalización

**** Atributo primo
, Si es miembro de cualquier clave candidata

**** Axiomas de amstrong
***** Axiomas básicos
****** Transitividad

, a->b y b->c entonces a->c

****** Reflexibilidad

, X es un conjunto de atributos y Y esta incluido en X entonces X->Y

****** Aumento

, Si X->Y y Z es un conjunto de atributos, entonces, Z,X->Z,Y

**** Axiomas que se deducen a partir de los axiomas básicos
****** Unión

, Si X->Y y X->Z entonces X->YZ

****** Descomposición
, Si X->Y,Z entonces X->Y y X->Z

****** Pseudotransitividad
, Si se tiene X->Y y Y,Z->W entonces X,Z->W

**** Análisis:
***** Perdida de información

, R= R1 union R2
R1 intersección R2 es clave en el esquema R1
R1 intersección R2 es clave en el esquema R2

***** Perdida de dependecias funcionales
, a) los atributos de la dependencia funcional original quedaron todos incluidos en alguna de las particiones generadas
  b) los atributos de la dependencia funcional original quedaron distribuidos en más de una partición

** Primera forma normal
  , Se prohíben los atributos multivaluados (aquellos que tienen
  múltiples valores), los atributos compuestos (aquellos compuestos a
  su vez de otros atributos) y sus combinaciones.

** Segunda forma normal
#+NAME: Segunda forma normal
  , Si esta en 1FN y todo atributo no primo depende funcionalmente de
  manera total de la clave primaria.

** Tercera forma normal
#+NAME: Tercera forma normal
  , Si esta en 2FN y ningún atributo no primo de R depende
  transitivamente de la clave primaria. Siempre que una dependencia
  funcional X->A se cumple en R o

 1) A es un atributo primo de R
 2) X es superclave de R

** Boyce-codd
#+NAME: Boyce-codd
  , siempre que una dependencia funcional X->A es válida en R,
  entonces X es superclave de R

 1) No existen dependencias multivaluadas o
 2) sólo existe una dependencia multivaluada trivial





















 
* Algebra relacional
** Operaciones

- Selección σ 
- Proyección π
- Producto Cartesiano X
- Producto Natural |X|
- Resta -
- Intersección
- Unión
- División %
  Operacion binaria entre dos tablas R y S que retorna las tuplas de
  la primera tabla que estan relacionadas con todas las tuplas de la
  segunda tabla

  R % S donde S es un subconjunto de los atributos de la tabla R con
  igual dominio

** Notacion
TABLAS
atributo o atributoLargo

Para consultas con más de dos operaciones usar subconsultas.
SUBCONSULTA <- TABLA |X|x=a OTRATABLA

** Reglas de optimizacion

*** Regla 5 - Conmutatividad del producto natural
*** Regla 8 - Conmutatividad de operaciones de conjuntos

Se pueden conmutar la Union y la interseccion.
LA RESTA NO!

*** Regla 12 - Otras transformaciones
Aplicacion de la ley de morgan en las condiciones
c = NOT (c1 AND c2) = (NOT c1) OR (NOT c2)
c = NOT (c1 OR c2) = (NOT c1) AND (NOT c2)


** Algoritmo de transformacion

*** Usando la regla 1- separar las condiciones compuestas de la
  selección en una cascada de selecciones

**** Regla 1 - Cascada de Selecciones
 σ{c1 and c2 and c3....}(R) = σ{c1}(σ{c2}(σ{c3}...(R)))

# Solo con operadores logicos and



*** Usando las reglas 2, 4, 6, y 10 mover cada operación de selección lo
  más abajo posible en el árbol de acuerdo con los atributos
  involucrados en la selección.


**** Regla 2 - Conmutatividad de la seleccion
σ{c1}(σ{c2}) = σ{c2}(σ{c1})

**** Regla 4 - Conmutatividad de la selección con la proyección
Si una condición c de una selección involucra sólo atributos
A1,...,An en la lista de la proyección, las dos operaciones
pueden conmutarse.

π{A1,A2,...,An}(σ{c}(R)) = σ{c}(π{A1,A2,...,An}(R))

Dependiendo de la naturaleza de los datos cual conviene.
A mayor cantidad de atributos, la proyección más abajo en el árbol
A mayor cantidad de tuplas, la selección más abajo en el árbol

**** Regla 6 - Conmutatividad de la seleccion con el producto cartesiano

Si todos los atributos de la condición de la selección involucran
sólo atributos de una de las relaciones del producto cartesiano
(por ejemplo R) las dos operaciones pueden conmutarse
σ{c}(R X S) = (σ{c}(R)) X S

**** Regla 10 - Conmutatividad de la seleccion con las operaciones de conjunto



*** Usando la regla 9 reacomodar las hojas del árbol de manera que las
  relaciones con selecciones mas restrictivas sean ejecutadas primero;
  por más restrictivas se entiende aquellas que produzcan la relación
  más chica en cantidad de tuplas o en tamaño absoluto.

**** Regla 9 - Asociatividad del producto natural, cartesiano, la union e interseccion



*** Transformar los productos naturales en productos cartesianos con
  selecciones cuyas condiciones representan la condición del producto
  natural. Es decir si tengo A|X| cond B ≡ σ cond (A |X| B) ≡ σ cond
  (σ c (A X B)) donde c representa la condición del producto natural y
  cond es alguna condición adicional que haya puesto en el producto
  natural. Tener en cuenta que cond , podría no existir.


*** Usar las reglas 3, 4, 7, y 11 para mover las proyecciones lo más
  abajo posible en el árbol y crear nuevas proyecciones cuando sea
  posible (nota: agregar proyecciones ayuda a reducir la cantidad de
  datos que se manipula en las consultas)

**** Regla 3 - Cascada de Proyecciones
π{c1}(π{c2}) = π{c1}

**** Regla 7 - Conmutatividad de la proyección con el producto natural
Si la lista de la proyección es L= {A1,...,An, B1, ..., Bm} donde
A1,...,An son atributos de R y B1,..., Bm son atributos de S. 
Si la condición del producto natural involucra sólo atributos de L,
las dos operaciones pueden conmutarse.

**** Regla 11 - La Proyeccion conmuta con la union



** Proceso de optimizacion
- Escribir el árbol binario de la consulta.
- Aplicar el algoritmo de optimización, indicando reglas de
  optimización usadas y pasos del algoritmo realizados para hallar el
  árbol canónico de la consulta. 
- Explicitar cual es el árbol canónico y escribir la consulta
  resultante del proceso de optimización (consulta canónica).

** Ejercicio 1.3
*** Tablas

TIPOMUEBLE (id_tipomueble,descripción)
FABRICANTE (id_fabricante,nombrefabricante,cuit)
TIPOMADERA (id_tipomadera,nombremadera)
AMBIENTE (id_ambiente,descripcionambiente)
MUEBLE (id_mueble, id_tipomueble, id_fabricante, id_tipomadera,
precio, dimensiones, descripcion)
MUEBLEAMBIENTE (id_mueble,id_ambiente)

*** Preguntas
**** Simbolos
σ π 
**** Nota
 Voy a poner los subindices entre {}
 
**** a) Obtener los nombres de los fabricante que fabrican muebles en todos los tipos de Madera


*Guardo todos los tipos de madera*

MADERAS <- π {id_tipomadera}(TIPOMADERA)

*Solamente los muebles que estan en todas las maderas con su
respectivo fabricante*

FABRICAMUEBLES <- (π{id_tipomadera, id_fabricante}MUEBLE) % MADERAS

RESULTADO <- π{nombreFabricante}(FABRICAMUEBLES|X|FABRICANTE)

**** b) Obtener los nombres de los fabricantes que sólo fabrican muebles en Pino


FABRICANTESGENERALES <- (σ{nombreMadera<>'Pino'}TIPOMADERA) |X| π
{id_fabricante,id_tipomadera} MUEBLE

FABRICANTESPINOGENERALES <- (σ{nombreMadera='Pino'}TIPOMADERA) |X|π
{id_fabricante,id_tipomadera} MUEBLE

FABRICANTESPINO
<-(π{id_fabricante}FABRICANTESPINO-π{id_fabricante}FABRICANTESGENERALES)

RESULTADO <- π{nombrefabricante}(FABRICANTESPINO|X|FABRICANTE)

**** c) Obtener los nombres de los fabricantes que fabrican muebles para todos los ambientes

*Obtengo los tipos de ambiente para cada fabricante*

FABRICANTESAMBIENTES <-
π{id_fabricante,id_ambiente}(MUEBLE|X|MUEBLEAMBIENTE)

*Solamente los que producen todos los tipo de muebles*

FABRICANTESCOMPLETOS <- FABRICANTESAMBIENTES % (π{id_ambiente}AMBIENTE)

RESULTADO <- π{nombrefabricante}(FABRICANTESCOMPLETOS)


**** d) Obtener los nombres de los fabricantes que sólo fabrican muebles para oficina

*Los que construyen de todo*
FABRICANTESOFICINA <- (σ{descripcion='oficina'}TIPOMUEBLE) |X| π
{id_fabricante,id_tipomueble} MUEBLE

*Los que construyen oficina*
FABRICANTESGENERALES <- (σ{descripcion<>'oficina'}TIPOMUEBLE) |X| π
{id_fabricante,id_tipomueble} MUEBLE

*La resta de los que fabrican oficina, con los que fabrican de todo*
FABRICANOFICINA<-(π{id_fabricante}FABRICANTESOFICINA-π{id_fabricante}FABRICANTESGENERALES)

*Los nombres*
RESULTADO <- π{nombrefabricante}(FABRICANOFICINA|X|FABRICANTE)

**** e) Obtener los nombres de los fabricantes que sólo fabrican muebles para baño y cocina.
**** f) Obtener los nombres de los fabricantes que producen muebles de cedro y roble.
**** g) Obtener los nombres de los fabricantes que producen muebles de melanina o MDF


* Modelado
